---
#
# Copyright (c) 2016, RTE (http://www.rte-france.com)
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# this module execute the security-analysis tools with test data


# show disclaimer and wait user [entrer] key press
- name: hades disclaimer
  when: hades_isDisclaimerPrompt
  pause: prompt="{{ hades_disclaimer }}"

#
- block:
    - set_fact:
        has_error: false

    - debug:
        msg: " log file: {{ hades_log_file }}"

    - name: Hades binary extract
      unarchive: src="{{ hades_src }}" dest="{{ hades_dst }}" creates="{{ hades_create }}"
      register: hades_install
      ignore_errors: True

    - name: hades create link
      file: src="{{ hades_create }}/share/java/{{ item.src }}"
            dest="{{ ipst_install_path }}/share/java/{{ item.src }}"
            state=link
            force=yes
      register: hadesLink
      when: hades_install|success
      #no_log: True
      with_items:
        - { src: "adn-export-0.1-SNAPSHOT.jar"}
        - { src: "hades2-integration-0.1-SNAPSHOT.jar"}
        - { src: "iidm-cvg-extensions-0.1-SNAPSHOT.jar"}

    - name: Hades configure
      when: hades_install|success
      register: hadesConfig
      template: src=itesla_config.xml.j2
                dest="{{ ansible_env.HOME }}/.itesla/config.xml"
                force=no
    #
    - name: Create data directory
      file: state=directory path={{ hades_situations_dst }}
    - name: Extract data
      copy: src={{ hades_situations_src }}  dest={{ hades_situations_dst }}

    - name: Create security_analysis test script
      template: src=test_security_analysis.sh.j2
                dest="{{ project_script }}/test_security_analysis.sh"
                mode=a+x

    - name: security_analysis test
      shell: "{{ project_script }}/test_security_analysis.sh"
      register: security

    - set_fact:
        security:
          stdout_lines: "{{security.stdout_lines|map('regex_replace', '\\\u001b\\[0m','')|map('regex_replace', '\\\u001b\\[33m','')|map('regex_replace', '\\t','    ') | list}}"


  rescue:
    - set_fact:
        has_error: true

  always:

    - name: Remove previous log file
      local_action: file state=absent path="{{ hades_log_file }}"

    - name: Format hades log result
      shell: 'echo "{{ security.stderr }}" |/bin/sed "s/\\t/    /g" |/bin/sed "s/\\n/\n/g"'
      when: security is defined and not security.skipped
      register: stderr
      ignore_errors: True

    # local dumps a per-host log of iPST install script execution
    - name: Create log file
      local_action: lineinfile dest="{{ hades_log_file }}"
        line="{{ {'_name':item._name|default('n/a') ,'cmd':item.cmd|default('n/a'), 'delta':item.delta|default('n/a') ,'end':item.end|default('n/a') ,'rc':item.rc|default('n/a') ,'state':item.state|default('n/a') ,'start':item.start|default('n/a') ,'stdout_lines':item.stdout_lines|default('n/a'), 'stderr':item.stderr_lines|default(omit) } | to_nice_json }}"
        state=present insertafter=EOF create=True
      when: item is defined
      no_log: True
      with_items:
        - "{{ security |default({}) |combine({'_name':'security-analysis-process'}) |combine({'stderr_lines':stderr.stdout_lines|default([])}) }}"

    - name: Check status
      fail:
        msg: security-analysis tools fail please see {{ hades_log_file }} log file
      when:  has_error
